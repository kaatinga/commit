name: Update VERSION file, recreate the tag, and release

on:
  push:
    tags:
      - '*'

jobs:
  update_version_and_retag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Extract current tag
        id: version
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
          echo "Current tag: $CURRENT_TAG"

      - name: Write current version to VERSION file
        run: echo $CURRENT_TAG > VERSION

      - name: Commit, delete old tag, recreate tag, and push
        run: |
          git config --local user.email "painter@3lines.club"
          git config --local user.name "Michael Gunkoff via GitHub Action"
          git add VERSION
          git commit -m "Update VERSION with current tag" || echo "No changes to commit"

          # Save the SHA of the new commit for later use
          NEW_COMMIT_SHA=$(git rev-parse HEAD)

          # Checkout the main branch and merge the changes from our new commit
          git checkout main
          git merge $NEW_COMMIT_SHA

          # Delete the old tag locally and remotely
          git tag -d $CURRENT_TAG
          git push --delete origin $CURRENT_TAG

          # Create the tag again, now pointing to the new commit
          git tag $CURRENT_TAG

          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/kaatinga/commit.git
          echo "Pushing changes, recreated tag to repository, and main branch"
          git push origin main
          git push origin $CURRENT_TAG
          
          echo "Waiting for a few seconds to ensure GitHub recognizes the new tag..."
          sleep 10  # waits for 10 seconds

      - name: Update Draft to Release or Create GitHub Release
        run: |
          # Fetch all draft releases
          DRAFTS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                             -H "Accept: application/vnd.github.v3+json" \
                             https://api.github.com/repos/${{ github.repository }}/releases)

          # Check if a draft for the current tag exists
          DRAFT_DATA=$(echo $DRAFTS_JSON | jq '.[] | select(.draft==true and .tag_name=="'"$CURRENT_TAG"'")')
          DRAFT_EXISTS=$(echo -n $DRAFT_DATA | wc -c)
          RELEASE_ID=$(echo $DRAFT_DATA | jq '.id')
          RELEASE_NAME=$(echo $DRAFT_DATA | jq '.name')

          # If a draft exists for the tag, update it to a release
          if [[ $DRAFT_EXISTS -gt 0 ]]; then
            curl -s -X PATCH \
                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID \
                 -d '{
                     "draft": false,
                     "name": '"$RELEASE_NAME"'
                   }'
          else
            # If no draft was found, create a new release for the tag
            curl -s -X POST \
                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/releases \
                 -d '{
                     "tag_name": "'"$CURRENT_TAG"'",
                     "name": "'"$CURRENT_TAG"'",
                     "body": "Release for version '"$CURRENT_TAG"'",
                     "draft": false,
                     "prerelease": false
                   }'
          fi
